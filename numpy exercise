import numpy as np

def mostrar_menu_principal():
    print("\nCalculadora NumPy")
    print("1. Operaciones con números")
    print("2. Operaciones con matrices")
    print("3. Salir")

def mostrar_menu_numeros():
    print("\nOperaciones con Números")
    print("1. Sumar")
    print("2. Restar")
    print("3. Multiplicar")
    print("4. Dividir")
    print("5. Potencia")
    print("6. Volver")

def mostrar_menu_matrices():
    print("\nOperaciones con Matrices")
    print("1. Sumar")
    print("2. Restar")
    print("3. Multiplicar (elemento a elemento)")
    print("4. Multiplicación matricial (A @ B)")
    print("5. Transpuesta")
    print("6. Inversa")
    print("7. Volver")

def obtener_numeros():
    a = float(input("Ingresa el primer número: "))
    b = float(input("Ingresa el segundo número: "))
    return a, b

def leer_matriz(nombre="matriz"):
    entrada = input(f"Ingrese la {nombre} (fila1; fila2; ...):\nEjemplo: 1 2; 3 4\n> ")
    try:
        filas = entrada.strip().split(";")
        matriz = [list(map(float, fila.strip().split())) for fila in filas]
        return np.array(matriz)
    except:
        print("Entrada inválida. Intenta de nuevo.")
        return leer_matriz(nombre)

def operaciones_con_numeros():
    while True:
        mostrar_menu_numeros()
        opcion = input("Selecciona una opción: ")

        if opcion == '6':
            break

        if opcion in ['1', '2', '3', '4', '5']:
            a, b = obtener_numeros()

            if opcion == '1':
                resultado = np.add(a, b)
                print(f"Suma: {resultado}")
            elif opcion == '2':
                resultado = np.subtract(a, b)
                print(f"Resta: {resultado}")
            elif opcion == '3':
                resultado = np.multiply(a, b)
                print(f"Multiplicación: {resultado}")
            elif opcion == '4':
                if b == 0:
                    print("Error: División por cero.")
                else:
                    resultado = np.divide(a, b)
                    print(f"División: {resultado}")
            elif opcion == '5':
                resultado = np.power(a, b)
                print(f"Potencia: {resultado}")
        else:
            print("Opción inválida.")

def operaciones_con_matrices():
    while True:
        mostrar_menu_matrices()
        opcion = input("Selecciona una opción: ")

        if opcion == '7':
            break

        if opcion in ['1', '2', '3', '4']:
            A = leer_matriz("matriz A")
            B = leer_matriz("matriz B")

            try:
                if opcion == '1':
                    resultado = np.add(A, B)
                    print("Suma de matrices:\n", resultado)
                elif opcion == '2':
                    resultado = np.subtract(A, B)
                    print("Resta de matrices:\n", resultado)
                elif opcion == '3':
                    resultado = np.multiply(A, B)
                    print("Multiplicación elemento a elemento:\n", resultado)
                elif opcion == '4':
                    resultado = A @ B
                    print("Multiplicación matricial (A @ B):\n", resultado)
            except ValueError as e:
                print("Error de dimensiones:", e)

        elif opcion == '5':
            A = leer_matriz()
            print("Transpuesta:\n", A.T)

        elif opcion == '6':
            A = leer_matriz()
            try:
                inversa = np.linalg.inv(A)
                print("Inversa:\n", inversa)
            except np.linalg.LinAlgError:
                print("La matriz no es invertible.")

        else:
            print("Opción inválida.")

def main():
    while True:
        mostrar_menu_principal()
        opcion = input("Selecciona una opción: ")

        if opcion == '1':
            operaciones_con_numeros()
        elif opcion == '2':
            operaciones_con_matrices()
        elif opcion == '3':
            print("Saliendo de la calculadora.")
            break
        else:
            print("Opción inválida.")

if __name__ == "__main__":
    main()
